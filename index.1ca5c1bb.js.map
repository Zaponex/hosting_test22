{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,MCCI,E,E,E,O,C,iB,I,G,E,E,O,C,mB,I,GACJ,IAAI,EAAgB,uEAuDpB,SAAS,EAAe,CAAK,CAAE,CAAO,EAClC,GAAI,CAAC,EAAY,CACb,QAAQ,GAAG,CAAC,+BACZ,MACJ,CACA,EAAW,OAAO,CAAC,EAAO,EAAS,AAAC,IAC5B,EACA,QAAQ,GAAG,CAAC,iBAAkB,GAE9B,QAAQ,GAAG,CAAC,CAAC,SAAS,EAAE,EAAQ,sBAAsB,EAAE,EAAM,CAAC,CAAC,CAExE,EACJ,CAEA,SAAS,IACL,OAAO,CACX,EACA,AAtEA,WACI,IAAM,EAAW,SAAW,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC,GAgBjE,AAFA,CAAA,EAAa,KAAK,OAAO,CAbZ,8BACG,CACZ,UAAW,GACX,SAAA,EACA,WAAY,OACZ,gBAAiB,EACjB,MAAO,CAAA,EACP,gBAAiB,IACjB,eAAgB,IAChB,SAAU,YACV,SAAU,eACd,EAEA,EAEW,EAAE,CAAC,UAAW,KACrB,QAAQ,GAAG,CAAC,oBAAsB,GAElC,AAkBR,SAA0B,CAAK,EAC3B,GAAI,CAAC,EAAY,CACb,QAAQ,GAAG,CAAC,+BACZ,MACJ,CACA,EAAW,SAAS,CAAC,EAAO,CAAE,IAAK,CAAE,EAAG,AAAC,IACjC,EACA,QAAQ,GAAG,CAAC,mBAAoB,GAEhC,QAAQ,GAAG,CAAC,iBAAkB,EAEtC,EACJ,EA9ByB,UACrB,GAEA,EAAW,EAAE,CAAC,UAAW,CAAC,EAAO,EAAS,KACtC,EAAgB,EAAQ,QAAQ,GAChC,QAAQ,GAAG,CAAC,CAAC,kBAAkB,EAAE,EAAc,WAAW,EAAE,EAAM,CAAC,CACvE,GAEA,EAAW,EAAE,CAAC,QAAS,AAAC,IACpB,QAAQ,GAAG,CAAC,oBAAqB,GACjC,EAAW,GAAG,EAClB,GAEA,EAAW,EAAE,CAAC,YAAa,KACvB,QAAQ,GAAG,CAAC,kBAChB,EACJ,G,G,E","sources":["<anon>","src/js/mqttClient.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequiref6c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequiref6c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"lN9t0\", function(module, exports) {\n\n$parcel$export(module.exports, \"publishMessage\", () => $fdd5847d0ffff27a$export$5ecf0545a6d326d0);\n$parcel$export(module.exports, \"getLatestMessage\", () => $fdd5847d0ffff27a$export$fddfca81df83d9f1);\n// Assuming 'mqtt' is imported or available globally\nlet $fdd5847d0ffff27a$var$mqttClient;\nlet $fdd5847d0ffff27a$var$latestMessage = \"StandardnachrichtStandardnachrichtStandardnachrichtStandardnachricht\";\nfunction $fdd5847d0ffff27a$var$connectToBroker() {\n    const clientId = \"client\" + Math.random().toString(36).substring(7);\n    const host = \"ws://4.184.199.231:15675/ws\"; // Use \"wss://\" for secure connections\n    const options = {\n        keepalive: 60,\n        clientId: clientId,\n        protocolId: \"MQTT\",\n        protocolVersion: 4,\n        clean: true,\n        reconnectPeriod: 1000,\n        connectTimeout: 30000,\n        username: \"prueferol\",\n        password: \"Susauskaka27!\"\n    };\n    $fdd5847d0ffff27a$var$mqttClient = mqtt.connect(host, options);\n    $fdd5847d0ffff27a$var$mqttClient.on(\"connect\", ()=>{\n        console.log(\"Client connected:\" + clientId);\n        // Example: Subscribe directly upon successful connection\n        $fdd5847d0ffff27a$var$subscribeToTopic(\"sensors\");\n    });\n    $fdd5847d0ffff27a$var$mqttClient.on(\"message\", (topic, message, packet)=>{\n        $fdd5847d0ffff27a$var$latestMessage = message.toString();\n        console.log(`Received Message: ${$fdd5847d0ffff27a$var$latestMessage} On topic: ${topic}`);\n    });\n    $fdd5847d0ffff27a$var$mqttClient.on(\"error\", (err)=>{\n        console.log(\"Connection Error:\", err);\n        $fdd5847d0ffff27a$var$mqttClient.end();\n    });\n    $fdd5847d0ffff27a$var$mqttClient.on(\"reconnect\", ()=>{\n        console.log(\"Reconnecting...\");\n    });\n}\nfunction $fdd5847d0ffff27a$var$subscribeToTopic(topic) {\n    if (!$fdd5847d0ffff27a$var$mqttClient) {\n        console.log(\"MQTT client not initialized\");\n        return;\n    }\n    $fdd5847d0ffff27a$var$mqttClient.subscribe(topic, {\n        qos: 0\n    }, (error)=>{\n        if (error) console.log(\"Subscribe error:\", error);\n        else console.log(\"Subscribed to:\", topic);\n    });\n}\nfunction $fdd5847d0ffff27a$export$5ecf0545a6d326d0(topic, message) {\n    if (!$fdd5847d0ffff27a$var$mqttClient) {\n        console.log(\"MQTT client not initialized\");\n        return;\n    }\n    $fdd5847d0ffff27a$var$mqttClient.publish(topic, message, (error)=>{\n        if (error) console.log(\"Publish error:\", error);\n        else console.log(`Message \"${message}\" published to topic \"${topic}\"`);\n    });\n}\nfunction $fdd5847d0ffff27a$export$fddfca81df83d9f1() {\n    return $fdd5847d0ffff27a$var$latestMessage;\n}\n$fdd5847d0ffff27a$var$connectToBroker();\n\n});\n\n\nparcelRequire(\"lN9t0\");\n\n//# sourceMappingURL=index.1ca5c1bb.js.map\n","// Assuming 'mqtt' is imported or available globally\r\nlet mqttClient;\r\nlet latestMessage = \"StandardnachrichtStandardnachrichtStandardnachrichtStandardnachricht\";\r\n\r\nfunction connectToBroker() {\r\n    const clientId = \"client\" + Math.random().toString(36).substring(7);\r\n    const host = \"ws://4.184.199.231:15675/ws\"; // Use \"wss://\" for secure connections\r\n    const options = {\r\n        keepalive: 60,\r\n        clientId,\r\n        protocolId: \"MQTT\",\r\n        protocolVersion: 4,\r\n        clean: true,\r\n        reconnectPeriod: 1000,\r\n        connectTimeout: 30 * 1000,\r\n        username: \"prueferol\",\r\n        password: \"Susauskaka27!\",\r\n    };\r\n\r\n    mqttClient = mqtt.connect(host, options);\r\n\r\n    mqttClient.on(\"connect\", () => {\r\n        console.log(\"Client connected:\" + clientId);\r\n        // Example: Subscribe directly upon successful connection\r\n        subscribeToTopic(\"sensors\");\r\n    });\r\n\r\n    mqttClient.on(\"message\", (topic, message, packet) => {\r\n        latestMessage = message.toString();\r\n        console.log(`Received Message: ${latestMessage} On topic: ${topic}`);\r\n    });\r\n\r\n    mqttClient.on(\"error\", (err) => {\r\n        console.log(\"Connection Error:\", err);\r\n        mqttClient.end();\r\n    });\r\n\r\n    mqttClient.on(\"reconnect\", () => {\r\n        console.log(\"Reconnecting...\");\r\n    });\r\n}\r\n\r\nfunction subscribeToTopic(topic) {\r\n    if (!mqttClient) {\r\n        console.log(\"MQTT client not initialized\");\r\n        return;\r\n    }\r\n    mqttClient.subscribe(topic, { qos: 0 }, (error) => {\r\n        if (error) {\r\n            console.log(\"Subscribe error:\", error);\r\n        } else {\r\n            console.log(\"Subscribed to:\", topic);\r\n        }\r\n    });\r\n}\r\n\r\n\r\nfunction publishMessage(topic, message) {\r\n    if (!mqttClient) {\r\n        console.log(\"MQTT client not initialized\");\r\n        return;\r\n    }\r\n    mqttClient.publish(topic, message, (error) => {\r\n        if (error) {\r\n            console.log(\"Publish error:\", error);\r\n        } else {\r\n            console.log(`Message \"${message}\" published to topic \"${topic}\"`);\r\n        }\r\n    });\r\n}\r\n\r\nfunction getLatestMessage() {\r\n    return latestMessage;\r\n}\r\nconnectToBroker();\r\nexport { getLatestMessage, publishMessage };\r\n\r\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$fdd5847d0ffff27a$var$mqttClient","$fdd5847d0ffff27a$export$5ecf0545a6d326d0","$fdd5847d0ffff27a$export$fddfca81df83d9f1","$fdd5847d0ffff27a$var$latestMessage","topic","message","console","log","publish","error","$fdd5847d0ffff27a$var$connectToBroker","clientId","Math","random","toString","substring","mqtt","connect","keepalive","protocolId","protocolVersion","clean","reconnectPeriod","connectTimeout","username","password","on","$fdd5847d0ffff27a$var$subscribeToTopic","subscribe","qos","packet","end"],"version":3,"file":"index.1ca5c1bb.js.map"}